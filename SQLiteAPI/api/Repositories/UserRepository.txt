
using Microsoft.EntityFrameworkCore;

public class UserRepository : IUserRepository
{
    private readonly ApplicationDBContext _context;

    public UserRepository(ApplicationDBContext context)
    {
        _context = context;
    }

    public List<User> GetAll()
    {
        return _context.Users.ToList();
    }

    public async Task<List<User>> GetAllAsync()
    {
        return await _context.Users.Include(u => u.Tests).ToListAsync();
    }

    public async Task<User?> GetByIdAsync(int userId)
    {
        return await _context.Users.Include(u => u.Tests).FirstOrDefaultAsync(u => u.ID == userId);
    }

    public async Task<KeyValuePair<string, string>?> GetByCredAsync(string login, string pass)
    {
        List<User> allUsers = await _context.Users.ToListAsync();

        KeyValuePair<string, string> userToSearch = new(login, pass);

        foreach (User user in allUsers)
        {
            if (user.Username == userToSearch.Key && user.Password == userToSearch.Value)
            {
                return userToSearch;
            }
        }

        return null;
    }

    public async Task<User?> CreateAsync(User newUser)
    {
        await _context.AddAsync(newUser);
        await _context.SaveChangesAsync();
        return newUser;
    }

    public async Task<User?> UpdateAsync(int userId, UpdateUserRequestDTO userDTO)
    {
        User? originalUser = await _context.Users.FirstOrDefaultAsync(user => user.ID == userId);

        if (originalUser == null) return null;

        originalUser.Username = userDTO.Username;
        originalUser.Password = userDTO.Password;
        originalUser.Email = userDTO.Email;
        originalUser.Name = userDTO.Name;
        originalUser.LastName = userDTO.LastName;

        await _context.SaveChangesAsync();
        return originalUser;
    }

    public async Task<User?> DeleteAsync(int userId)
    {
        User? user = await _context.Users.FirstOrDefaultAsync(user => user.ID == userId);

        if (user == null) return null;

        _context.Users.Remove(user);
        await _context.SaveChangesAsync();
        return user;
    }

    public async Task<bool> IsExists(int userId)
    {
        return await _context.Users.AnyAsync(u => u.ID == userId);
    }
}